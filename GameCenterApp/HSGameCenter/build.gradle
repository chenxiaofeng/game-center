buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.2'
    }
}
apply plugin: 'com.android.application'

dependencies {
    compile fileTree(include: '*.jar', dir: 'libs')
}

android {
    signingConfigs {
        config {
            storeFile file(System.getenv()['APK_KEY_STORE'])
            keyAlias System.getenv()['APK_KEY_ALIAS']
            keyPassword System.getenv()['APK_KEY_ALIAS_PASSWORD']
            storePassword System.getenv()['APK_KEY_STORE_PASSWORD']
        }
    }
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        multiDexEnabled true
        applicationId "com.hykj.gamecenter"
        minSdkVersion 14
        targetSdkVersion 21
        versionCode getBuildVersionCode()
        versionName "6." + getBuildVersionName() + ".70"
    }


    
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')


    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
            signingConfig signingConfigs.config
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
            signingConfig signingConfigs.config
        }
    }

    //执行lint检查，有任何的错误或者警告提示，都会终止构建，我们可以将其关掉。
    lintOptions {
        abortOnError false
    }
}

def getProjectName() {
    return "HSGamecenter"
}

def getSourceApkName() {
    return "HSGamecenter-release.apk"
}

def getDailyBuildApkName() {
    return "${getProjectName()}-release-build${getCurrentVersionCode()}.apk"
}

def getNewsetApkName() {
    return "${getProjectName()}.apk"
}

def getSourceApkPath() {
    return "./build/outputs/apk/${getSourceApkName()}"
}

def getProjectDailyBuildPath() {
    return System.getenv()['ANT_BUILD_RELEASE'] + "/dailybuild/${getProjectName()}"
}

def getProjectNewsetPath() {
    return System.getenv()['ANT_BUILD_RELEASE'] + "/newest/${getProjectName()}"
}

def getVersionFilePath() {
    return "${getVersionFileParentPath()}/version.properties"
}

def getVersionFileParentPath() {
    return getProjectDailyBuildPath()
}

def getVersionCodeTag() {
    return 'VERSION_CODE'
}

def getDefaultVersionCode() {
    return "0"
}

def getBuildVersionCode() {
    def Properties versionProps = new Properties()
    def versionPropsFile = file(getVersionFilePath())
    if (versionPropsFile.exists())
        versionProps.load(new FileInputStream(versionPropsFile))
    else {
        def versionPropsParent = file(getVersionFileParentPath())
        if (!versionPropsParent.exists()) {
            versionPropsParent.mkdir()
        }
    }
    def code = (versionProps[getVersionCodeTag()] ?: getDefaultVersionCode()).toInteger() + 1
    versionProps[getVersionCodeTag()] = code.toString()
    versionProps.store(versionPropsFile.newWriter(), null)
    return code as int
}

def getCurrentVersionCode() {
    def Properties versionProps = new Properties()
    def versionPropsFile = file(getVersionFilePath())
    if (versionPropsFile.exists())
        versionProps.load(new FileInputStream(versionPropsFile))
    else {
        def versionPropsParent = file(getVersionFileParentPath())
        if (!versionPropsParent.exists()) {
            versionPropsParent.mkdir()
        }
    }
    def code = (versionProps[getVersionCodeTag()] ?: getDefaultVersionCode()).toInteger() - 1
    return code as int
}


def getBuildVersionName() {
    return new java.text.SimpleDateFormat("MM.dd").format(new Date())
}

def getTime(){
    return new java.text.SimpleDateFormat("yyyy.MM.dd").format(new Date())
}

def copyFileToNewset() {
    def fromFile = getSourceApkPath()
    def intoFile = getProjectNewsetPath()
//    print("++++++++++++++copyFileToNewset fromFile = ${fromFile}\n\r")
//    print("++++++++++++++copyFileToNewset intoFile = ${intoFile}\n\r")
    def appName = getNewsetApkName()
    copy {
        from fromFile
        into intoFile
        rename {
            appName
        }
    }
}

def copyFileToDailyBuild() {
    def fromFile = getSourceApkPath()
    def intoFile = "${getProjectDailyBuildPath()}/${getTime()}"
//    print("++++++++++++++copyFileToDailyBuild fromFile = ${fromFile}\n\r")
//    print("++++++++++++++copyFileToDailyBuild intoFile = ${intoFile}\n\r")
    def appName = getDailyBuildApkName()
    copy {
        from fromFile
        into intoFile
        rename {
            appName
        }
    }
}

build {
    doLast {
        copyFileToNewset()
        copyFileToDailyBuild()
    }
}
